#include <iostream>
#include <cmath>

double f(double x) {
    return pow(x, 4) / (19 + pow(x, 2));
}

// Метод прямоугольников
double rectangle_rule(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = 0.0;
    for (int i = 0; i < n; i++) {
        sum += f(a + i * h);
    }
    return h * sum;
}

// Метод трапеций
double trapezoidal_rule(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = 0.5 * (f(a) + f(b));
    for (int i = 1; i < n; i++) {
        sum += f(a + i * h);
    }
    return h * sum;
}

// Метод Симпсона
double simpson_rule(double a, double b, int n) {
    double h = (b - a) / n;
    double sum = f(a) + f(b);
    for (int i = 1; i < n; i += 2) {
        sum += 4 * f(a + i * h);
    }
    for (int i = 2; i < n - 1; i += 2) {
        sum += 2 * f(a + i * h);
    }
    return h / 3 * sum;
}

int main() {
    double a = 1.0;
    double b = 2.0;
    double epsilon = 1e-6;

    int n = 2;
    double result_rect = rectangle_rule(a, b, n);
    double result_trap = trapezoidal_rule(a, b, n);
    double result_simpson = simpson_rule(a, b, n);

    while (std::abs(result_rect - result_trap) >= epsilon || std::abs(result_trap - result_simpson) >= epsilon) {
        n *= 2;
        result_rect = rectangle_rule(a, b, n);
        result_trap = trapezoidal_rule(a, b, n);
        result_simpson = simpson_rule(a, b, n);
    }

    std::cout << "Rectangle rule: " << result_rect << std::endl;
    std::cout << "Trapezoidal rule: " << result_trap << std::endl;
    std::cout << "Simpson rule: " << result_simpson << std::endl;

    return 0;
}
